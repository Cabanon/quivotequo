import requests
import re
import xml.etree.ElementTree as ET
import unicodedata
from datetime import datetime, date
from enum import StrEnum, auto

import typer
from bs4 import BeautifulSoup
from sqlalchemy.orm import Session

from database import engine
from models import Member, Group, Party, Procedure, Vote, RCV


class Data(StrEnum):
    DEPUTEES = auto()
    VOTES = auto()
    RCV = auto()


def result_from_str(s: str) -> Vote.Result:
    match s:
        case '+': return Vote.Result.ADOPTED
        case '-': return Vote.Result.REJECTED
        

def type_from_amendment(amendment: str) -> Vote.Type:
    match amendment:
        case '§': return Vote.Type.SEPARATE
        case None: return Vote.Type.FINAL
        case _: return Vote.Type.AMENDMENT


def process_table(table):
    rows = []
    rowspans = {}
    col_nb = None
    for tr in table.findall('TBODY/TR'):
        row = []
        col_nb = col_nb or len(tr)
        while len(row) < col_nb:
            i = len(row)
            td = tr.find(f"TD[@COLNAME='C{i+1}']")
            if td is not None:
                row.append(', '.join(td.itertext()))
                if 'COLSPAN' in td.keys() and len(rows) > 0: #skip colspan in header
                    cols_to_add = int(td.get('COLSPAN'))-1
                    row.extend(cols_to_add*[None])
                if 'ROWSPAN' in td.keys():
                    rowspans[i] = int(td.get('ROWSPAN'))-1
            elif i in rowspans:
                rowspan = rowspans[i]
                row.append(rows[-1][i])
                if rowspan == 1:
                    del rowspans[i]
                else:
                    rowspans[i] = rowspan-1 
            else:
                row.append(None)
        rows.append(row)
    if len(rows) == 0:
        return []
    header = rows[0]
    print(header)
    return [{col_name.replace('\t', ''): row[i] for i, col_name in enumerate(header)} for row in rows[1:]]


def extract_reference(title: str):
    match = re.search(r'(A|B|C|RC-)9-\d{4}/20\d{2}', title)
    return match.group(0) if match else None

def normalize(s):
    return unicodedata.normalize('NFD', s).encode('ASCII', 'ignore').lower()

def main(data: Data):
    match data:
        case Data.DEPUTEES:
            meps = ET.fromstring(requests.get('https://www.europarl.europa.eu/meps/fr/full-list/xml').content)
            wiki = BeautifulSoup(requests.get('https://fr.wikipedia.org/wiki/Liste_des_d%C3%A9put%C3%A9s_europ%C3%A9ens_de_France_de_la_9e_l%C3%A9gislature').content, features='lxml')
            table = wiki.find(id='Liste_des_députés_européens').findNext('table')
            with Session(engine) as session:
                for mep in meps:
                    if mep.find('country').text == 'France':
                        full_name = mep.find('fullName').text
                        print(full_name)
                        cell = table.find(lambda tag: 'title' in tag.attrs and normalize(full_name) in normalize(tag['title']))
                        party_name = cell.parent.find_next_siblings(limit=2)[1].a.text
                        session.add(
                            Member(
                                id=mep.find('id').text,
                                full_name=mep.find('fullName').text,
                                group=Group(mep.find('politicalGroup').text),
                                party=Party(party_name)
                            )
                        )
                session.commit()
        case Data.VOTES:
            response = requests.get('https://www.europarl.europa.eu/plenary/fr/ajax/getSessionCalendar.html?family=PV&termId=9').json()
            start_date = datetime.strptime(response['startDate'], '%d/%m/%Y').date()
            end_date = datetime.strptime(response['endDate'], '%d/%m/%Y').date()
            with Session(engine) as session:
                for sess in response['sessionCalendar']:
                    sess_date = date(*map(int, (sess['year'], sess['month'], sess['day'])))
                    if date(2020, 10, 4) < sess_date < date(2020, 10, 6):
                        url = sess['url']
                        request = requests.get(url.replace('TOC', 'VOT').replace('.html', '.xml'))
                        try:
                            request.raise_for_status()
                        except requests.HTTPError:
                            continue
                        votes = ET.fromstring(request.content)[0]
                        for vote in votes.find('Vote.Results'):
                            print(vote.find('Vote.Result.Text.Title').text)
                            rows = process_table(vote.find('Vote.Result.Table.Results/TABLE'))
                            # session.add(
                            #     VoteCollection(
                            #         ref=extract_reference(title),
                            #         title=title,
                            #         date=sess_date
                            #     )
                            # )
                            for row in rows:
                                result = row['Vote']
                                vote_type = type_from_amendment(row['AN, etc.'])
                                if result not in ['↓', 'R', '', None] and row['AN, etc.'] != 'div':
                                    amendment = row.get('Am n°')
                                    print(row)
                                    session.add(
                                        Vote(
                                            subject=row.get('Objet'),
                                            author=row.get('Auteur'),
                                            type=vote_type,
                                            amendment=amendment if amendment != '§' else None,
                                            result=result_from_str(result),
                                        )
                                    )
                                    session.commit()
        case Data.RCV:
            response = requests.get('https://www.europarl.europa.eu/plenary/fr/ajax/getSessionCalendar.html?family=PV&termId=9').json()
            start_date = datetime.strptime(response['startDate'], '%d/%m/%Y').date()
            end_date = datetime.strptime(response['endDate'], '%d/%m/%Y').date()
            with Session(engine) as session:
                for sess in response['sessionCalendar']:
                    sess_date = date(*map(int, (sess['year'], sess['month'], sess['day'])))
                    if start_date < sess_date < end_date:
                        request = requests.get(sess['url'].replace('TOC', 'RCV').replace('.html', '.xml'))
                        try:
                            request.raise_for_status()
                        except requests.HTTPError:
                            continue
                        votes = ET.fromstring(request.content)
                        for vote in votes.findall('RollCallVote.Result'):
                            for position in ['For', 'Against', 'Abstention']:
                                for group in vote.find(f'Result.{position}'):
                                    for rc_vote in group:
                                        member_id = int(rc_vote.get('MepId'))
                                        session.add(
                                            RCV(
                                                id=int(vote.get('Identifier')),
                                                member_id=member_id,
                                                reference=extract_reference(vote.find('RollCallVote.Description.Text').text),
                                                position=RCV.Position(position.lower()),
                                            )
                                        )
                    if sess_date.month > 9: break            

if __name__ == "__main__":
    typer.run(main)